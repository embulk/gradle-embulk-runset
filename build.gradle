plugins {
    id "java"
    id "java-gradle-plugin"
    id "checkstyle"
    alias(libs.plugins.gradle.plugin.publish)
}

repositories {
    mavenCentral()
}

// This Gradle plugin is published under the group "gradle.plugin.org.embulk".
// We have an option to avoid the "gradle.plugin" prefix, but we don't do it as it bothers the Gradle team.
// They want Gradle plugins to be published under the "gradle.plugin" prefix for some security reasons.
// https://plugins.gradle.org/docs/publish-plugin
group = "org.embulk"
version = "0.2.0-SNAPSHOT"
description = "A Gradle plugin to prepare an environment for running Embulk"

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

dependencies {
    implementation gradleApi()

    testImplementation gradleTestKit()
    testImplementation platform(libs.junit5.bom)
    testImplementation libs.bundles.junit5.implementation
    testRuntimeOnly libs.bundles.junit5.runtime
}

jar {
    from rootProject.file("LICENSE")
}

gradlePlugin {
    website = "https://www.embulk.org/"
    vcsUrl = "https://github.com/embulk/gradle-embulk-runset"

    plugins {
        embulkPluginsPlugin {
            id = "org.embulk.runset"
            displayName = "A Gradle plugin to prepare an environment for running Embulk"
            description = "${project.description}"
            implementationClass = "org.embulk.gradle.runset.EmbulkRunSetPlugin"
            tags = ["embulk"]
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        outputs.upToDateWhen { false }
        exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
        showCauses = true
        showExceptions = true
        showStackTraces = true
        showStandardStreams = true
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

checkstyle {
    toolVersion = libs.versions.checkstyle.get()
    configFile = file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
    configProperties = [
        "org.checkstyle.google.suppressionfilter.config": file("${rootProject.projectDir}/config/checkstyle/checkstyle-suppressions.xml"),
    ]
    ignoreFailures = false
    maxWarnings = 0
}
